user:mchopra (Manu, Chopra)

App Name: #lsd
Student Name: Manu Chopra

App Flow: (This paragraph explains every single functionality of the app. To see the iOS APIs used for these functions, please see the next section)

	As you open the app, You see a login page with 2 buttons - Join an existing LSD or Create your own LSD. In its current functionality, both the buttons 	      lead to the same functionality. Behind the buttons, I added a gif using a UIWebView with the MIME type of a gif. On clicking any of these 2 buttons,  	    you are asked to provide an authentication. If you are on a TouchID enabled hardware, you will be prompted to use TouchID to authenticate yourself. If
	you don't have a TouchID device, the app relies on the conventional password trick. Now ideally, dancers can only enter certain password names to ente	      r the app but I am simulating server interaction here. If a new LSD is made, I create an object class for it on Parse. The Parse backend of the applic	    ation is not fully built but simulates the real life server interaction. 

	After logging in and authenticating yourself using the TouchID API, you see an interface with 3 tabs. Let's talk about the 3 tabs seperately: 

	1. Play - The play screen allows use to chose the music you want to add to the playlist by clicking the "Create your playlist" option. On clicking thi			s option, A MPMediaPlayerController is initiated which allows you to select relevant songs. You can add multiple songs or even entire playli		      sts. As you click Done, the play button changes to pause. You can use the pause button to stop the music temporarily. When the pause button 		    is clicked, the play button appears. 
	2. Map -  The map screen uses CLLocation Manager to track your current location. If you are using the app for the first time, It will prompt you to al			low #lsd to access your location while the app is in use. I found this feature particularly hard to implement. You can use the segmented con		      trol of "Start/Stop Tracking" to share or hide your location data. Once you share your location, I use the MKMapView to map the current loca		    tion and then I use MKPolyLine to plot the user path as he/she runs. I was also reporting the user speed and calories burnt in this screen b
		  ut the accuracy of my model was very questionable and hence I decided to ommit it.To test the MKPolyLine plot, Run the app in the OSX simula
		  tor and click on the Debug option, Select Location and then select City Run.
	3. Wall - The wall features a "Promoted Video" selected by an RA. The video might take a few seconds to load as it is hosted on my super slow server. 			The video is displayed using the MPMoviePlayerController. The wall also gives you three extra features. You can share the video using a      		      UIActivityViewController. The app creates a custom text for you to share the video which you can change. You can also take pictures and vide		    os. Both the pictures and videos are automatically saved to the Camera Roll using a UIImagePickerController. Since we live in the era of bre		  vity, Videos are limited to the length of 6 seconds.  
	
List of iOS APIs and features used: (In order of appearance)
	1. A Navigation Controller that runs through the entire application allowing the user to go back to the Login page at any time.
	2. Login Page: 
		2.1. A UIWebView to display a gif in the background. I really wanted a video in the background, so I converted it to a gif and used a UIWebVie			   w to add it to the background. 
		2.2. AVAudioPlayer for the background Tequila song.
		2.3. A UIView filter - I added a UIView filter (with alpha of 0.05) on the top of the gif to make the two buttons more readable.
	3. Clicking this button creates a push segue to the required screens. 
	4. Tabbed Screen:
		4.1. I used a TabViewController with 3 View Controllers - Play, Music and Wall. 
		4.2. Play: The Play View Controller is also a MPMediaPickerControllerDelegate, AVAudioPlayerDelegate and UIAlertViewDelegate.
			a) 2 UISwipeGestureRecognizers to recognize the difference between a left and a right swipe. 
			b) HEAVY - TouchID API to authenticate the user and dealing with all the extraneous cases. 
			c) UIAlertView for the convential username/password entering system if TouchID fails.
			d) Parse API to create a new object class for every new object class.
			e) A MPMediaPickerController to allow the user to chose which song(s) to play.
			f) A MPMusicPlayerContoller to pause/play the song(s) chosen by the user.
		4.3. Map: The Map View Controller is also a CLLocationManagerDelegate and a MKMapViewDelegate.	
			a) A UISegmentedControl to start or stop the tracking.
			b) A UIAlertController object to display alerts to the user.
			c) HEAVY - CLLocationManager (CoreLocation API) to find the user's current location. I found it a lot of work of managing all the rele				vant authoriztions required to get the location.
			d) MKMapView (MapKit API) to display the current location on the map. 
			e) MKPolyLine to plot the user's path. I keep a track of the locations of the user by maintaining an array of CLLocations.
		4.4. Wall: The Wall View Controller is also a UINavigationControllerDelegate and a UIImagePickerControllerDelegate.
			a) MPMoviePlayerController to play the promoted movie. 
			b) UIActivityViewController to bring up the iOS Share screen which allows you to share the video url across social media.
			c) 2 UIImagePickerControllers to shoot and save photos and videos from the app straight into the camera roll. 
			d) Used UIImageWriteToSavedPhotoAlbum to save the photos into the camera roll. 

That's about it! It was great fun to make this app. I learnt so much through this class. Thank you Kevin for being a great TA and forgiving me for the mistakes I made and Thank you Paul for being a great teacher! 

Best,
Manu



















	  
